generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// The Profile model represents a user profile
model Profile {
  id String @id @default(uuid()) // Unique identifier for the profile
  userId String @unique // Unique identifier for the associated user
  name String // Name of the user
  imageUrl String @db.Text // URL of the user's profile image
  email String @db.Text // Email of the user
  createAt DateTime @default(now()) // Date and time when the profile was created
  updatedAt DateTime @updatedAt // Date and time when the profile was last updated

  channel Channel[] // Channel associated with the profile
  server Server[] // Servers associated with the profile
  member Member[] // Member associated with the profile
}

model Server {
  id String @id @default(uuid()) // Unique identifier for the server
  name String // Name of the server
  imageUrl String @db.Text // URL of the server's image
  inviteCode String @unique // Invite code for the server
  createAt DateTime @default(now()) // Date and time when the profile was created
  updatedAt DateTime @updatedAt // Date and time when the profile was last updated

  member Member[]
  channel Channel[] 
  profileId String // Foreign key to the associated profile

  profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade) // Profile associated with the server
  @@index([profileId]) // Index on the profileId field for faster queries
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
} //* This code snippet defines an enumeration called MemberRole with three possible values: ADMIN, MODERATOR, and GUEST. It allows you to represent different roles that a member can have in a system.

model Member{
  id String @id @default(uuid())
  role MemberRole @default(GUEST) //By default a user become an guest.

  profileId String // The same process will do again 
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // We also member server in which user is accocited: So we can know what role user have in the server
  messages Message[]
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsRecieved Conversation[] @relation("MemberTwo")
  directMessages DirectMessage[]

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@index([serverId])
  @@index([profileId])
}

enum ChannelType{
  TEXT 
  AUDIO 
  VIDEO
} // We will define channel types within Discord

model Channel{
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT) // It means when user create a new channel in the chat by default the Chat type is Text.
  createAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  profileId String 
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  messages Message[]
  

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  
  @@index([serverId])
  @@index([profileId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne",fields: [memberOneId], references: [id], onDelete: Cascade)
  
  
  memberTwoId String
  memberTwo Member @relation("MemberTwo",fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberOneId])
  @@index([memberTwoId])

  @@unique([memberOneId,memberTwoId]) // Both memberOneId and memberTwoId must be unique
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([memberId])
  @@index([conversationId])
}